[project]
name = 'granian'
authors = [
    { name = 'Giovanni Barillari', email = 'g@baro.dev' }
]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: BSD License',
    'Operating System :: MacOS',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX :: Linux',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Programming Language :: Python',
    'Programming Language :: Rust',
    'Topic :: Internet :: WWW/HTTP',
]

dynamic = [
    'description',
    'keywords',
    'license',
    'readme',
    'version',
]

requires-python = '>=3.8'
dependencies = [
    'typer>=0.4.2',
    'uvloop~=0.18.0; sys_platform != "win32" and platform_python_implementation == "CPython"',
]

[project.optional-dependencies]
pname = [
    'setproctitle~=1.3.3',
]
reload = [
    'watchfiles~=0.21',
]
lint = [
    'ruff~=0.1.0',
]
test = [
    'httpx~=0.25.0',
    'pytest~=7.4.2',
    'pytest-asyncio~=0.21.1',
    'websockets~=11.0',
]
all = ['granian[pname,reload]']
dev = ['granian[all,lint,test]']

[project.urls]
Homepage = 'https://github.com/emmett-framework/granian'
Funding = 'https://github.com/sponsors/gi0baro'
Source = 'https://github.com/emmett-framework/granian'

[project.scripts]
granian = 'granian:cli.cli'

[build-system]
requires = ['maturin>=1.1.0,<1.5.0']
build-backend = 'maturin'

[tool.maturin]
module-name = 'granian._granian'
bindings = 'pyo3'

[tool.ruff]
line-length = 120
extend-select = [
    # E and F are enabled by default
    'B',      # flake8-bugbear
    'C4',     # flake8-comprehensions
    'C90',    # mccabe
    'I',      # isort
    'N',      # pep8-naming
    'Q',      # flake8-quotes
    'RUF100', # ruff (unused noqa)
    'S',      # flake8-bandit
    'W',      # pycodestyle
]
extend-ignore = [
    'B008', # function calls in args defaults are fine
    'B009', # getattr with constants is fine
    'B034', # re.split won't confuse us
    'B904', # rising without from is fine
    'E501', # leave line length to black
    'N818', # leave to us exceptions naming
    'S101', # assert is fine
]
flake8-quotes = { inline-quotes = 'single', multiline-quotes = 'double' }
mccabe = { max-complexity = 13 }

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2
known-first-party = ['granian', 'tests']

[tool.ruff.per-file-ignores]
'granian/_granian.pyi' = ['I001']
'tests/**' = ['B018', 'S110', 'S501']

[tool.pytest.ini_options]
asyncio_mode = 'auto'
